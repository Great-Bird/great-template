local ReplicatedStorage = game:GetService("ReplicatedStorage")

local JestGlobals = require(ReplicatedStorage.DevPackages.JestGlobals)
local NumberUtil = require(ReplicatedStorage.Shared.Util.NumberUtil)

local describe = JestGlobals.describe
local it = JestGlobals.it
local expect = JestGlobals.expect

describe("NumberUtil", function()
	describe(".formatDecimals", function()
		it("removes only extra padded 0s", function()
			expect(NumberUtil.formatDecimals(1.001, 2)).toBe("1")
			expect(NumberUtil.formatDecimals(1.001, 3)).toBe("1.001")
			expect(NumberUtil.formatDecimals(1.001, 4)).toBe("1.001")
		end)
	end)

	describe(".round", function()
		it("rounds to the nearest decimal of the specified place", function()
			expect(NumberUtil.round(1.001, 2)).toBe(1)
			expect(NumberUtil.round(1.001, 3)).toBeCloseTo(1.001)
			expect(NumberUtil.round(1.001, 4)).toBeCloseTo(1.001)
		end)

		it("rounds to the nearest whole number if no decimal place is specified", function()
			expect(NumberUtil.round(1.001)).toBe(1)
			expect(NumberUtil.round(1.5)).toBe(2)
			expect(NumberUtil.round(1.999)).toBe(2)
		end)

		it("rounds to the nearest whole number if the decimal place is 0", function()
			expect(NumberUtil.round(1.001, 0)).toBe(1)
			expect(NumberUtil.round(1.5, 0)).toBe(2)
			expect(NumberUtil.round(1.999, 0)).toBe(2)
		end)

		it("rounds to the nearest place value if the decimal place is negative", function()
			expect(NumberUtil.round(1234.5678, -1)).toBe(1230)
			expect(NumberUtil.round(1234.5678, -2)).toBe(1200)
			expect(NumberUtil.round(1234.5678, -3)).toBe(1000)
			expect(NumberUtil.round(8765.4321, -1)).toBe(8770)
			expect(NumberUtil.round(8765.4321, -2)).toBe(8800)
			expect(NumberUtil.round(8765.4321, -3)).toBe(9000)
		end)
	end)

	describe(".abbreviate", function()
		it("formats thousands with K", function()
			expect(NumberUtil.abbreviate(1000)).toBe("1K")
			expect(NumberUtil.abbreviate(1001)).toBe("1.001K")
			expect(NumberUtil.abbreviate(9999)).toBe("9.999K")
			expect(NumberUtil.abbreviate(99999)).toBe("99.999K")
			expect(NumberUtil.abbreviate(999999)).toBe("999.999K")
		end)

		it("formats negative numbers", function()
			expect(NumberUtil.abbreviate(-1000)).toBe("-1K")
			expect(NumberUtil.abbreviate(-1001)).toBe("-1.001K")
			expect(NumberUtil.abbreviate(-9999)).toBe("-9.999K")
			expect(NumberUtil.abbreviate(-99999)).toBe("-99.999K")
			expect(NumberUtil.abbreviate(-999999)).toBe("-999.999K")
		end)

		it("formats millions with M", function()
			expect(NumberUtil.abbreviate(1000000)).toBe("1M")
			expect(NumberUtil.abbreviate(1000100)).toBe("1M")
			expect(NumberUtil.abbreviate(1001000)).toBe("1.001M")
			expect(NumberUtil.abbreviate(9999999)).toBe("9.999M")
		end)

		it("returns the number as a string with up to 3 decimal places if it is less than 1000", function()
			expect(NumberUtil.abbreviate(999)).toBe("999")
			expect(NumberUtil.abbreviate(999.9)).toBe("999.9")
			expect(NumberUtil.abbreviate(999.99)).toBe("999.99")
			expect(NumberUtil.abbreviate(999.999)).toBe("999.999")
		end)

		it("floors the result to 3 decimal places", function()
			expect(NumberUtil.abbreviate(999.9999)).toBe("999.999")
			expect(NumberUtil.abbreviate(999.99999)).toBe("999.999")
		end)

		it("abbreviates the number to the nearest abbreviation", function()
			expect(NumberUtil.abbreviate(1000)).toBe("1K")
			expect(NumberUtil.abbreviate(1001)).toBe("1.001K")
			expect(NumberUtil.abbreviate(9999)).toBe("9.999K")
			expect(NumberUtil.abbreviate(99999)).toBe("99.999K")
			expect(NumberUtil.abbreviate(999999)).toBe("999.999K")
			expect(NumberUtil.abbreviate(1000000)).toBe("1M")
			expect(NumberUtil.abbreviate(1000100)).toBe("1M")
			expect(NumberUtil.abbreviate(9999999)).toBe("9.999M")
		end)
	end)
end)
